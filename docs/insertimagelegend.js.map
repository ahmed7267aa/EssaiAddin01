{"version":3,"file":"insertimagelegend.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/insertimagelegend/insertimagelegend.js"],"sourcesContent":["// Ce code est CRUCIAL - il attend que Office.js soit prêt\nOffice.initialize = function() {\n  console.log(\"Office.js est initialisé\");\n};\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    console.log(\"Word est prêt ! Votre complément peut s'initialiser\");\n\n    // Fonction utilitaire de log (écrit en HTML dans les zones identifiées)\n    function log(id, txt, level) {\n      const el = document.getElementById(id);\n      if (!el) {\n        console.error(`Élément avec ID \"${id}\" non trouvé`);\n        return;\n      }\n\n      const span = document.createElement('div');\n      span.innerHTML = txt;\n      el.prepend(span);\n\n      const consoleEl = document.getElementById('console');\n      if (consoleEl) {\n        consoleEl.textContent = txt + '\\n' + consoleEl.textContent;\n      }\n    }\n\n    // Core: get OOXML and parse\n    async function getBodyOoxml() {\n      return Word.run(async (context) => {\n        const body = context.document.body;\n        const ooxml = body.getOoxml();\n        await context.sync();\n        return ooxml.value;\n      });\n    }\n\n    // Helper: extract text content from an OOXML <w:p> element\n    function getParagraphText(pNode) {\n      // concatenate all w:t child text nodes\n      const texts = pNode.getElementsByTagName('w:t');\n      let s = '';\n      for (let i = 0; i < texts.length; i++) s += texts[i].textContent;\n      return s.trim();\n    }\n\n    // Parse OOXML and find images & captions (version améliorée pour la \"liste des figures\")\n    async function analyzeDocument() {\n      try {\n        const xmlString = await getBodyOoxml();\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xmlString, 'application/xml');\n\n        // Vérifier si le parsing a réussi\n        const parserError = doc.getElementsByTagName('parsererror');\n        if (parserError.length > 0) {\n          throw new Error('Erreur lors de l\\'analyse OOXML: ' + parserError[0].textContent);\n        }\n\n        // Count images: look for <w:drawing> or <w:pict>\n        const drawings = doc.getElementsByTagName('w:drawing') || [];\n        const picts = doc.getElementsByTagName('w:pict') || [];\n        const imageCount = (drawings.length || 0) + (picts.length || 0);\n\n        // Find all paragraph nodes\n        const paragraphs = doc.getElementsByTagName('w:p');\n\n        // Find caption paragraphs: text beginning with 'Figure <num>' (French)\n        const captionRegex = /^Figure\\s+\\d+\\s*[:\\-–]?/i;\n        const captions = [];\n        for (let i = 0; i < paragraphs.length; i++) {\n          const p = paragraphs[i];\n          const txt = getParagraphText(p);\n          if (captionRegex.test(txt)) {\n            // check for centering: look for <w:jc w:val=\"center\"/> inside <w:pPr>\n            let centered = false;\n            const pPr = p.getElementsByTagName('w:pPr');\n            if (pPr && pPr.length > 0) {\n              const jc = pPr[0].getElementsByTagName('w:jc');\n              if (jc && jc.length > 0 && jc[0].getAttribute('w:val') && jc[0].getAttribute('w:val').toLowerCase() === 'center') centered = true;\n            }\n            captions.push({ text: txt, centered: centered, nodeIndex: i });\n          }\n        }\n\n        // --------------------------------------------------------------------\n        // Find \"Liste des figures\" (heading) and its following entries — version plus robuste\n        // --------------------------------------------------------------------\n        let listNodeIndex = -1;\n        let listEntries = [];\n\n        // Helper to find paragraph index from a node (walk up to w:p)\n        function findParagraphIndexFromNode(node, paragraphs) {\n          let anc = node;\n          while (anc && anc.nodeName && anc.nodeName.toLowerCase() !== 'w:p') anc = anc.parentNode;\n          if (!anc) return -1;\n          for (let i = 0; i < paragraphs.length; i++) {\n            if (paragraphs[i] === anc) return i;\n          }\n          return -1;\n        }\n\n        // 1) Rechercher des champs/field instructions (TOC / Table of Figures) dans le OOXML\n        const instrNodes = Array.from(doc.getElementsByTagName('w:instrText') || []);\n        for (let k = 0; k < instrNodes.length && listNodeIndex === -1; k++) {\n          const txt = (instrNodes[k].textContent || '').trim();\n          if (/TOC\\b|tableof|table of figures|table des illustrations|liste des figures|table des figures/i.test(txt)) {\n            listNodeIndex = findParagraphIndexFromNode(instrNodes[k], paragraphs);\n            break;\n          }\n        }\n\n        // 2) Rechercher des <w:fldSimple w:instr=\"...\"> si pas trouvé\n        if (listNodeIndex === -1) {\n          const fldSimples = Array.from(doc.getElementsByTagName('w:fldSimple') || []);\n          for (let k = 0; k < fldSimples.length; k++) {\n            const instrAttr = (fldSimples[k].getAttribute && (fldSimples[k].getAttribute('w:instr') || fldSimples[k].getAttribute('instr'))) || '';\n            if (/TOC\\b|tableof|table of figures|table des illustrations|liste des figures|table des figures/i.test(instrAttr)) {\n              listNodeIndex = findParagraphIndexFromNode(fldSimples[k], paragraphs);\n              break;\n            }\n          }\n        }\n\n        // 3) Si toujours pas trouvé, heuristique : détecter un paragraphe qui \"ressemble\" à une entrée de table des figures\n        if (listNodeIndex === -1) {\n          for (let i = 0; i < paragraphs.length; i++) {\n            const txt = getParagraphText(paragraphs[i]);\n            if (!txt) continue;\n            // candidate: \"Figure 1 : Titre .... 2\" ou \"Figure 1\\tTitre\\t2\"\n            if (/\\bFigure\\s*\\d+\\b/i.test(txt) && (/\\.{3,}/.test(txt) || /\\s\\d+$/.test(txt) || txt.indexOf('\\t') !== -1)) {\n              listNodeIndex = i;\n              break;\n            }\n          }\n        }\n\n        // 4) Si on a trouvé une position, collecter les entrées suivantes (jusqu'à paragraphe vide ou limite)\n        if (listNodeIndex !== -1) {\n          for (let j = listNodeIndex + 1; j < paragraphs.length; j++) {\n            const txt = getParagraphText(paragraphs[j]);\n            if (!txt) break; // arrêt sur paragraphe vide (heuristique)\n            // considérer comme entrée si ressemble à \"Figure ...\" OU contient 'figure' et un numéro/page\n            if (captionRegex.test(txt) || (txt.toLowerCase().includes('figure') && (/\\s\\d+$/.test(txt) || /\\.{3,}/.test(txt) || txt.indexOf('\\t') !== -1))) {\n              const hyperlinks = paragraphs[j].getElementsByTagName('w:hyperlink');\n              const hasLink = hyperlinks && hyperlinks.length > 0;\n              listEntries.push({ text: txt, hasLink: hasLink });\n            } else {\n              // si paragraphe court / pas ressemblant on arrête (heuristique)\n              if (txt.length < 2) break;\n              // sinon on continue mais ne l'ajoute pas\n            }\n            // safety: ne pas scanner indéfiniment\n            if (listEntries.length > 200) break;\n          }\n        }\n\n        // Retourner le résultat\n        return { imageCount, captions, listNodeIndex, listEntries };\n      } catch (err) {\n        console.error(\"Erreur dans analyzeDocument:\", err);\n        throw err;\n      }\n    }\n\n    // --------------------------------------------------------------------\n    // Écouteurs des boutons (assume que les éléments existent dans le DOM)\n    // --------------------------------------------------------------------\n    document.addEventListener('DOMContentLoaded', () => {\n      // bouton - images\n      const chkImages = document.getElementById('chk-images');\n      if (chkImages) {\n        chkImages.onclick = async function() {\n          try {\n            const res = await analyzeDocument();\n\n            if (res.imageCount < 2) {\n              if (res.imageCount === 0) {\n                log('res-images', '<span class=\"ko\">Aucune image détectée dans le document.</span>');\n                log('console', 'Vérification images: 0 trouvées.');\n              } else {\n                log('res-images', '<span class=\"ko\">Pas plusieurs images détectées (seulement 1 image).</span>');\n                log('console', 'Vérification images: 1 trouvée — pas de pluralité.');\n              }\n            } else if (res.imageCount === 2) {\n              // Message en vert pour indiquer que c'est bon quand il y a exactement 2 images\n              log('res-images', '<span class=\"ok\">Images détectées: 2 — OK.</span>');\n              log('console', 'Vérification images: 2 trouvées — OK.');\n            } else {\n              // Plus de 2 images\n              log('res-images', 'Images détectées: ' + res.imageCount);\n              log('console', 'Vérification images: ' + res.imageCount + ' trouvées.');\n            }\n          } catch (err) {\n            log('res-images', 'Erreur: ' + err.message);\n            console.error(err);\n          }\n        };\n      }\n\n      // bouton - légendes\n      const chkCaptions = document.getElementById('chk-captions');\n      if (chkCaptions) {\n        chkCaptions.onclick = async function() {\n          try {\n            const res = await analyzeDocument();\n            const capCount = res.captions.length;\n            if (capCount === 0) {\n              log('res-captions', 'Aucune légende détectée (pattern \"Figure N : ...\").');\n            } else {\n              log('res-captions', 'Légendes détectées: ' + capCount);\n              res.captions.forEach((c, i) => {\n                const cent = c.centered ? '<span class=\"ok\">centrée</span>' : '<span class=\"ko\">non centrée</span>';\n                log('res-captions', '• ' + c.text + ' — ' + cent);\n              });\n            }\n            log('console', 'Vérification légendes terminée.');\n          } catch (err) {\n            log('res-captions', 'Erreur: ' + err.message);\n            console.error(err);\n          }\n        };\n      }\n\n      // bouton - liste des figures\n// bouton - liste des figures (remplace l'ancien chkList.onclick par ce bloc)\nconst chkList = document.getElementById('chk-list');\nif (chkList) {\n  chkList.onclick = async function() {\n    try {\n      const res = await analyzeDocument();\n\n      // Pas de table détectée\n      if (res.listNodeIndex === -1) {\n        log('res-list', '<span class=\"ko\">Aucune \"Liste des figures\" détectée.</span>');\n        log('console', 'Vérification liste des figures: introuvable.');\n        return;\n      }\n\n      // Table trouvée — analyser les entrées\n      if (!res.listEntries || res.listEntries.length === 0) {\n        log('res-list', '<span class=\"ko\">Table des figures trouvée mais aucune entrée détectée.</span>');\n        log('console', 'Vérification liste des figures: table trouvée mais 0 entrées.');\n        return;\n      }\n\n      // Condition \"respectée\" : nombre d'entrées == nombre de légendes\n      const countsMatch = (res.listEntries.length === res.captions.length);\n      if (countsMatch) {\n        log('res-list', '<span class=\"ok\">Liste des figures trouvée et nombre d\\'entrées cohérent avec les légendes (' + res.captions.length + ').</span>');\n        log('console', 'Vérification liste des figures: OK (' + res.listEntries.length + ' entrées).');\n      } else {\n        log('res-list', '<span class=\"ko\">Liste trouvée mais nombre d\\'entrées (' + res.listEntries.length + \") != nombre de légendes ('\" + res.captions.length + \"').</span>\");\n        log('console', 'Vérification liste des figures: KO (comptes différents).');\n      }\n\n      // Afficher les entrées — si tout est OK, on les met en vert ; sinon on colore selon le lien (ou rouge)\n      res.listEntries.forEach((e, i) => {\n        const lineClass = countsMatch ? 'ok' : (e.hasLink ? 'ok' : 'ko');\n        log('res-list', '• <span class=\"' + lineClass + '\">' + e.text + '</span>' + (e.hasLink ? ' (lien)' : ' (pas de lien)'));\n      });\n\n    } catch (err) {\n      log('res-list', 'Erreur: ' + err.message);\n      console.error(err);\n    }\n  };\n}\n\n\n      // bouton - liens dans la liste\n      const chkLinks = document.getElementById('chk-links');\n      if (chkLinks) {\n        chkLinks.onclick = async function() {\n          try {\n            const res = await analyzeDocument();\n            if (res.listNodeIndex === -1) {\n              log('res-links', 'Impossible de vérifier les liens car la liste des figures est introuvable.');\n              return;\n            }\n            const missing = res.listEntries.filter(e => !e.hasLink);\n            if (missing.length === 0) {\n              log('res-links', 'Tous les éléments de la liste des figures semblent avoir des liens.');\n            } else {\n              log('res-links', missing.length + ' éléments dans la liste des figures n\\'ont pas de lien.');\n            }\n          } catch (err) {\n            log('res-links', 'Erreur: ' + err.message);\n            console.error(err);\n          }\n        };\n      }\n\n      // bouton - init (optionnel, si présent dans ton HTML)\n      const initBtn = document.getElementById('btn-init');\n      if (initBtn) {\n        initBtn.onclick = async function() {\n          try {\n            await Word.run(async (context) => {\n              const body = context.document.body;\n              body.load('text');\n              await context.sync();\n              if (body.text && body.text.trim().length > 0) {\n                const keep = confirm(\"Le document contient déjà du texte. Effacer pour créer le document d'exemple ?\");\n                if (!keep) return;\n                body.clear();\n              }\n\n              body.insertParagraph('Exercice : Insérer plusieurs images à différents emplacements, ajouter une légende sous chaque image (centrée, numérotée automatiquement), et générer une liste des figures.', Word.InsertLocation.end);\n              body.insertParagraph('\\n--- Page 1 ---\\n', Word.InsertLocation.end);\n              body.insertParagraph('Instructions répétées pour remplir le document...', Word.InsertLocation.end);\n              body.insertParagraph('\\n--- Page 2 ---\\n', Word.InsertLocation.end);\n              body.insertParagraph('Placez des images manuellement à différents emplacements, puis ajoutez une légende sous chaque image de la forme \"Figure 1 : ...\"', Word.InsertLocation.end);\n\n              await context.sync();\n              log('console', 'Document d\\'exemple créé (partiel). Ajoutez des images manuelles puis utilisez les vérifications.');\n            });\n          } catch (err) {\n            log('console', 'Erreur initialisation: ' + err.message);\n            console.error(err);\n          }\n        };\n      }\n\n      log('console', 'Complément prêt à l\\'emploi !');\n    }); // end DOMContentLoaded\n  } // end if host\n}); // end Office.onReady\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","Office","initialize","console","log","onReady","info","host","HostType","Word","id","txt","level","el","document","getElementById","span","createElement","innerHTML","prepend","consoleEl","textContent","error","concat","getBodyOoxml","_ref","_callee2","_context2","run","_ref2","_callee","context","body","ooxml","_context","getOoxml","sync","_x","getParagraphText","pNode","texts","getElementsByTagName","s","trim","analyzeDocument","_ref3","_callee3","findParagraphIndexFromNode","xmlString","parser","doc","parserError","drawings","picts","imageCount","paragraphs","captionRegex","captions","centered","pPr","jc","listNodeIndex","listEntries","instrNodes","k","_txt","fldSimples","_k","instrAttr","_i2","_txt2","j","_txt3","hyperlinks","hasLink","_t","_context3","node","anc","nodeName","toLowerCase","parentNode","DOMParser","parseFromString","Error","test","getAttribute","push","text","nodeIndex","Array","from","indexOf","includes","addEventListener","chkImages","onclick","_callee4","res","_t2","_context4","message","chkCaptions","_callee5","capCount","_t3","_context5","forEach","cent","chkList","_callee6","countsMatch","_t4","_context6","lineClass","chkLinks","_callee7","missing","_t5","_context7","filter","initBtn","_callee9","_t6","_context9","_ref9","_callee8","_context8","load","confirm","clear","insertParagraph","InsertLocation","end","_x2"],"sourceRoot":""}